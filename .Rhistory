makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 1:10
makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(f)
f
v <- numeric(1,2,2)
y <- c(1,2,3)
cachemean()
x <- c(12,12)
cachemean()
cachemean()
y <- c(0,1,2,2,3)
makeVector()
cachemean()
x <- 1:10
## This function creates a special "matrix" object that can cache its inverse.
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
makeCacheMatrix <- function( newM = newMatrix() ) {
i <- NULL
set <- function( matrix ) {
newM <<- matrix
i <<- NULL
}
get <- function() {
newM
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
CacheM <- x$getInverse()
if( !is.null(CacheM) ) {
message("getting cached data")
return(CacheM)
}
data <- x$get()
CacheM <- solve(data)
x$setInverse(CacheM) %*% data
CacheM
}
f <- matrix(rnorm(9)
,3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
## This function creates a special "matrix" object that can cache its inverse.
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
makeCacheMatrix <- function( newM = newMatrix() ) {
i <- NULL
set <- function( matrix ) {
newM <<- matrix
i <<- NULL
}
get <- function() {
newM
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
newM <- x$getInverse()
if( !is.null(newM) ) {
message("getting cached data")
return(newM)
}
data <- x$get()
newM <- solve(data)
x$setInverse(newM) %*% data
newM
}
f <- matrix(rnorm(9),3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
## This function creates a special "matrix" object that can cache its inverse.
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
makeCacheMatrix <- function( newM = newMatrix() ) {
i <- NULL
set <- function( matrix ) {
newM <<- matrix
i <<- NULL
}
get <- function() {
newM
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
newM <- x$getInverse()
if( !is.null(newM) ) {
message("getting cached data")
return(newM)
}
data <- x$get()
newM <- solve(data)
x$setInverse(newM) %*% data
newM
}
}
## A pair of functions that cache the inverse of a matrix
## Creates a special matrix object that can cache its inverse
makeCacheMatrix <- function( m = matrix() ) {
## Initialize the inverse property
i <- NULL
## Method to set the matrix
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Method to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Method to get the inverse of the matrix
getInverse <- function() {
## Return the inverse property
i
}
## Return a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Compute the inverse of the special matrix returned by "makeCacheMatrix"
## above. If the inverse has already been calculated (and the matrix has not
## changed), then the "cachesolve" should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
## Just return the inverse if its already set
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Get the matrix from our object
data <- x$get()
## Calculate the inverse using matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Return the matrix
m
}
f <- matrix(rnorm(9),3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function( j = matrix() ) {
i <- NULL
set <- function( matrix ) {
j <<- matrix
i <<- NULL
}
get <- function() {
j
}
setInverse <- function(inverse) {
i <<- inverse
}
getInverse <- function() {
i
}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
j <- x$getInverse()
if( !is.null(j) ) {
message("getting cached data")
return(j)
}
data <- x$get()
j <- solve(data) %*% data
x$setInverse(j)
j
}
f <- matrix(rnorm(9),3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function( j = matrix() ) {
i <- NULL
set <- function( matrix ) {
j <<- matrix
i <<- NULL
}
get <- function() {j}
setInverse <- function(inverse) {i <<- inverse}
getInverse <- function() {i}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
j <- x$getInverse()
if( !is.null(j) ) {
message("getting cached data")
return(j)
}
data <- x$get()
j <- solve(data) %*% data
x$setInverse(j)
j
}
f <- matrix(rnorm(9),3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function( j = matrix() ) {
i <- NULL
set <- function( matrix ) {
j <<- matrix
i <<- NULL
}
get <- function() {j}
setInverse <- function(inverse) {i <<- inverse}
getInverse <- function() {i}
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
j <- x$getInverse()
if( !is.null(j) ) {
message("getting cached data")
return(j)
}
data <- x$get()
j <- solve(data)
x$setInverse(j)
j
}
f <- matrix(rnorm(9),3,3)
g <- makeCacheMatrix(f)
cacheSolve(g)
